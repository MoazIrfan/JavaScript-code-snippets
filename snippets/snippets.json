{
"console.info": {
  "prefix": "ci",
  "body": [
      "console.info($1);"
  ],
  "description": "Code snippet for \"console.info\""
},
"console.log": {
  "prefix": "cl",
  "body": [
      "console.log($1);"
  ],
  "description": "Code snippet for \"console.log\""
},
"console.error": {
 "prefix": "ce",
 "body": [
     "console.error($1);"
 ],
 "description": "Code snippet for \"console.error\""
},
"console.warn": {
  "prefix": "cw",
  "body": [
      "console.warn($1);"
  ],
  "description": "Code snippet for \"console.warn\""
},
"console.dir": {
 "prefix": "cd",
 "body": [
     "console.dir($1);"
 ],
 "description": "Code snippet for \"console.dir\""
},
"addEventListener": {
 "prefix": "ae",
 "body": [
     "${1:document}.addEventListener('${2:load}', (e) => {",
     "\t${3:// body}",
     "});"
 ],
 "description": "Code snippet for \"addEventListener\""
},
"appendChild": {
 "prefix": "ac",
 "body": [
     "${1:document}.appendChild(${2:elem});"
 ],
 "description": "Code snippet for \"appendChild\""
},
"removeChild": {
 "prefix": "rc",
 "body": [
     "${1:document}.removeChild(${2:elem});"
 ],
 "description": "Code snippet for \"removeChild\""
},
"createElement": {
 "prefix": "cel",
 "body": [
     "${1:document}.createElement(${2:elem});"
 ],
 "description": "Code snippet for \"createElement\""
},
"createDocumentFragment": {
 "prefix": "cdf",
 "body": [
     "${1:document}.createDocumentFragment();$2"
 ],
 "description": "Code snippet for \"createDocumentFragment\""
},
"classList.add": {
 "prefix": "ca",
 "body": [
     "${1:document}.classList.add('${2:class}');"
 ],
 "description": "Code snippet for \"classList.add\""
},
"classList.toggle": {
 "prefix": "ct",
 "body": [
     "${1:document}.classList.toggle('${2:class}');"
 ],
 "description": "Code snippet for \"classList.toggle\""
},
"classList.remove": {
 "prefix": "cr",
 "body": [
     "${1:document}.classList.remove('${2:class}');"
 ],
 "description": "Code snippet for \"classList.remove\""
},
"getElementById": {
 "prefix": "gi",
 "body": [
     "${1:document}.getElementById('${2:id}');"
 ],
 "description": "Code snippet for \"getElementById\""
},
"getElementsByClassName": {
 "prefix": "gc",
 "body": [
     "${1:document}.getElementsByClassName('${2:class}');"
 ],
 "description": "Code snippet for \"getElementsByClassName\""
},
"getElementsByTagName": {
 "prefix": "gt",
 "body": [
     "${1:document}.getElementsByTagName('${2:tag}');"
 ],
 "description": "Code snippet for \"getElementsByTagName\""
},
"getAttribute": {
 "prefix": "ga",
 "body": [
     "${1:document}.getAttribute('${2:attr}');"
 ],
 "description": "Code snippet for \"getAttribute\""
},
"setAttribute": {
 "prefix": "sa",
 "body": [
     "${1:document}.setAttribute('${2:attr}', ${3:value});"
 ],
 "description": "Code snippet for \"setAttribute\""
},
"removeAttribute": {
 "prefix": "ra",
 "body": [
     "${1:document}.removeAttribute('${2:attr}');"
 ],
 "description": "Code snippet for \"removeAttribute\""
},
"innerHTML": {
 "prefix": "ih",
 "body": [
     "${1:document}.innerHTML = '${2:elem}';"
 ],
 "description": "Code snippet for \"innerHTML\""
},
"textContent": {
 "prefix": "tc",
 "body": [
     "${1:document}.textContent = '${2:content}';"
 ],
 "description": "Code snippet for \"textContent\""
},
"querySelector": {
 "prefix": "qs",
 "body": [
     "${1:document}.querySelector('${2:selector}');"
 ],
 "description": "Code snippet for \"querySelector\""
},
"querySelectorAll": {
 "prefix": "qsa",
 "body": [
     "${1:document}.querySelectorAll('${2:selector}');"
 ],
 "description": "Code snippet for \"querySelectorAll\""
},
"for loop": {
 "prefix": "fl",
 "body": "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${0}\n}",
 "description": "for loop"
},
"reverse for loop": {
 "prefix": "rfl",
 "body": "for (let ${1:i} = ${2:iterable}.length - 1; ${1:i} >= 0; ${1:i}--) {\n\t${0}\n}",
 "description": "reverse for loop"
},
"for in loop": {
 "prefix": "fi",
 "body": "for (let ${1:key} in ${2:array}) {\n\tif (${2:array}.hasOwnProperty(${1:key})) {\n\t\t${0}\n\t}\n}",
 "description": "for in loop"
},
"for of loop (ES6)": {
 "prefix": "fo",
 "body": "for (let ${1:key} of ${2:array}) {\n\t${0}\n}",
 "description": "for of loop (ES6)"
},
"while loop": {
 "prefix": "wl",
 "body": "while (${1:condition}) {\n\t${0}\n}",
 "description": "while loop"
},
"anonymous function": {
 "prefix": "f",
 "body": "function (${1:arguments}) {\n\t${0}\n}",
 "description": "anonymous function"
},
"named function": {
 "prefix": "fn",
 "body": "function ${1:name}(${2:arguments}) {\n\t${0}\n}",
 "description": "named function"
},
"immediately-invoked function expression (IIFE)": {
 "prefix": "iife",
 "body": "((${1:arguments}) => {\n\t${0}\n})(${2});",
 "description": "immediately-invoked function expression (IIFE)"
},
"function apply": {
 "prefix": "fa",
 "body": "${1:fn}.apply(${2:this}, ${3:arguments})",
 "description": "function apply"
},
"function call": {
 "prefix": "fc",
 "body": "${1:fn}.call(${2:this}, ${3:arguments})",
 "description": "function call"
},
"function bind": {
 "prefix": "fb",
 "body": "${1:fn}.bind(${2:this}, ${3:arguments})",
 "description": "function bind"
},
"arrow function (ES6)": {
 "prefix": "af",
 "body": "(${1:arguments}) => ${2:statement}",
 "description": "arrow function (ES6)"
},
"arrow function with body (ES6)": {
 "prefix": "afb",
 "body": "(${1:arguments}) => {\n\t${0}\n}",
 "description": "arrow function with body (ES6)"
},
"generator function (ES6)": {
 "prefix": "gf",
 "body": "function* (${1:arguments}) {\n\t${0}\n}",
 "description": "generator function (ES6)"
},
"named generator function (ES6)": {
 "prefix": "gfn",
 "body": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}",
 "description": "named generator function (ES6)"
},
"sequence of 0..n": {
 "prefix": "seq",
 "body": "[...Array(${1:length}).keys()]${0}",
 "description": "sequence of 0..n"
},
"forEach loop": {
 "prefix": "fe",
 "body": "${1}.forEach((${2:item}) => {\n\t${0}\n});",
 "description": "forEach loop"
},
"map": {
 "prefix": "map",
 "body": "${1}.map((${2:item}) => {\n\t${0}\n});",
 "description": "map"
},
"reduce": {
 "prefix": "reduce",
 "body": "${1}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial});",
 "description": "reduce"
},
"filter": {
 "prefix": "filter",
 "body": "${1}.filter(${2:item} => {\n\t${0}\n});",
 "description": "filter"
},
"find": {
 "prefix": "find",
 "body": "${1}.find(${2:item} => {\n\t${0}\n});",
 "description": "find"
},
"JSON.parse": {
 "prefix": "jp",
 "body": [
     "JSON.parse(${1:obj});"
 ],
 "description": "Code snippet for 'JSON.parse'"
},
"JSON.stringify": {
 "prefix": "js",
 "body": [
     "JSON.stringify(${1:obj});"
 ],
 "description": "Code snippet for 'JSON.stringify'"
},
"setInterval": {
 "prefix": "si",
 "body": [
     "setInterval(function() {",
     "\t${0:// body}",
     "}, ${1:1000});"
 ],
 "description": "Code snippet for 'setInterval'"
},
"setTimeout": {
 "prefix": "st",
 "body": [
     "setTimeout(function() {",
     "\t${0:// body}",
     "}, ${1:1000});"
 ],
 "description": "Code snippet for 'setTimeout'"
},
"use strict": {
 "prefix": "us",
 "body": [
     "'use strict';"
 ],
 "description": "Code snippet for 'use strict'"
},
"alert": {
 "prefix": "al",
 "body": [
     "alert('${1:msg}');"
 ],
 "description": "Code snippet for 'alert'"
},
"confirm": {
 "prefix": "co",
 "body": [
     "confirm('${1:msg}');"
 ],
 "description": "Code snippet for 'confirm'"
},
"prompt": {
 "prefix": "pm",
 "body": [
     "prompt('${1:msg}');"
 ],
 "description": "Code snippet for 'prompt'"
},
"ternary operator": {
 "prefix": "ter",
 "body": "${1:condition} ? ${2:expression} : ${3:expression};",
 "description": "ternary operator"
},
"debugger": {
 "prefix": "de",
 "body": [
     "debugger;$1"
 ],
 "description": "Code snippet for \"debugger\""
}
}